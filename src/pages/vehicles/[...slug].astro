---
import FormattedDate from '@/components/Helpers/FormattedDate.astro';
import Layout from '@/layouts/Default.astro';

export const getStaticPaths = async () => {
  const pages = await getCollection('vehicles');

  return pages.map((page) => ({
    params: {
      slug: page.id,
    },
    props: { page },
  }));
}

const { page } = Astro.props;
const { data } = page;
const { fuelups, name } = data;

const totalCost = fuelups.reduce((n: number, { litres, price }) => n + (litres * price), 0).toLocaleString('en-gb', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
const totalFuelups = fuelups.length;
const totalLitres = fuelups.reduce((n: number, { litres }) => n + litres, 0);
const totalMiles = fuelups.reduce((n: number, { miles }) => n + miles, 0);
const averageMpg = calculateMpg(totalLitres, totalMiles);
const summary = [
  { name: 'Average MPG', value: averageMpg },
  { name: 'Fuelups', value: totalFuelups },
  { name: 'Miles Driven', value: totalMiles },
  { name: 'Litres Used', value: totalLitres },
  { name: 'Total Spent', value: `£${totalCost}` },
];
---

<Layout heading={name}>
  <Container>
    <!-- <Debug {fuelups} /> -->
    <div class="gap-4  grid  py-8  sm:py-16  lg:gap-8">
      <div class="gap-4  grid  grid-cols-2  sm:grid-cols-5  lg:gap-8">
        {summary.map(({ name, value }) => (
          <div class="bg-white  border  border-zinc-200  flex  flex-col  h-full  overflow-hidden  p-4  rounded-md  space-y-1">
            <h2 class="font-medium  text-sm">{name}</h2>
            <p class="font-mono  text-xl">{value.toLocaleString('en-gb')}</p>
          </div>
        ))}
      </div>
      <canvas class="aspect-2/1  w-full" data-fuelups={btoa(JSON.stringify(fuelups))} id="fuelups-chart"></canvas>
      <div class="border  border-zinc-200  overflow-x-auto  rounded-md  sm:overflow-hidden">
        <table class="border-collapse  -mb-[1px]  table-auto  text-left  text-sm  w-full  whitespace-nowrap">
          <thead>
            <tr class="border-b  border-zinc-200  bg-zinc-100">
              <th class="px-3  py-2">Date</th>
              <th class="px-3  py-2">Miles</th>
              <th class="px-3  py-2">Litres</th>
              <th class="px-3  py-2">MPG</th>
              <th class="px-3  py-2">Price</th>
              <th class="px-3  py-2">Cost</th>
            </tr>
          </thead>
          <tbody class="divide-solid  divide-y  divide-zinc-200  font-mono  text-zinc-600">
            {fuelups?.sort((a, b) => b.date.valueOf() - a.date.valueOf()).map(({ date, litres, miles, price }: { date: Date, litres: number, miles: number, price: number }) => {
              const fuelupMpg = calculateMpg(litres, miles);

              return (
                <tr class="even:bg-zinc-50">
                  <td class="px-3  py-2"><FormattedDate date={date} /></td>
                  <td class="px-3  py-2">{miles.toLocaleString('en-gb', { minimumFractionDigits: 1 })}</td>
                  <td class="px-3  py-2">{litres.toLocaleString('en-gb', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                  <td class="px-3  py-2">
                    <span class="justify-between  flex  w-12">
                      {fuelupMpg}
                      <span class={`${fuelupMpg == averageMpg ? '' : (fuelupMpg > averageMpg ? 'text-primary-700' : 'text-red-400')}`}>
                        {fuelupMpg == averageMpg ? '-' : fuelupMpg > averageMpg ? '↑' : '↓'}
                      </span>
                    </span>
                  </td>
                  <td class="px-3  py-2">{price}</td>
                  <td class="px-3  py-2">&pound;{(litres * price).toLocaleString('en-gb', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                </tr>
              )
            })}
          </tbody>
        </table>
      </div>
    </div>
  </Container>
</Layout>

<script>
import Chart from 'chart.js/auto';

document.addEventListener('astro:page-load', () => {
  if (typeof document !== 'undefined') {
    (async function () {
      const element = document.getElementById('fuelups-chart') as HTMLCanvasElement;
      if (!element) return;

      const encodedObject = element.dataset.fuelups;
      if (!encodedObject) return;

      const fuelups = JSON.parse(window.atob(encodedObject));

      const mpgByMonth: Record<string, number[]> = {};
      const costByMonth: Record<string, number> = {};

      fuelups.forEach(entry => {
        const date = new Date(entry.date);
        const key = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;
        const mpg = (entry.miles / entry.litres) * 4.546;
        const cost = entry.litres * entry.price;

        if (!mpgByMonth[key]) {
          mpgByMonth[key] = [];
          costByMonth[key] = 0;
        }

        mpgByMonth[key].push(mpg);
        costByMonth[key] += cost;
      });

      const monthlyKeys = Object.keys(mpgByMonth).sort();

      const monthlyAverages = monthlyKeys.map(key => {
        const values = mpgByMonth[key];
        const avg = values.reduce((a, b) => a + b, 0) / values.length;
        return +avg.toFixed(1);
      });

      const monthlyLabels = monthlyKeys.map(key => {
        const [year, month] = key.split('-');
        const date = new Date(Number(year), Number(month) - 1);
        return date.toLocaleDateString('en-GB', {
          month: 'long',
          year: 'numeric'
        });
      });

      const totalMiles = fuelups.reduce((sum, e) => sum + e.miles, 0);
      const totalLitres = fuelups.reduce((sum, e) => sum + e.litres, 0);
      const overallAverage = +(totalMiles / totalLitres * 4.546).toFixed(1);

      new Chart(element, {
        data: {
          datasets: [
            {
              borderColor: '#037960',
              borderWidth: 2,
              data: monthlyAverages,
              pointRadius: 4,
              tension: 0.3,
            },
            {
              borderColor: '#1e1d23',
              borderWidth: 2,
              borderDash: [8, 8],
              data: new Array(monthlyLabels.length).fill(overallAverage),
              pointRadius: 0,
            }
          ],
          labels: monthlyLabels
        },
        options: {
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              displayColors: false,
              callbacks: {
                label: (context) => `Average: ${context.parsed.y} MPG`
              }
            }
          },
          responsive: true,
          scales: {
            y: { title: { display: true , text: 'MPG'   } },
            x: { title: { display: false, text: 'Month' } }
          }
        },
        type: 'line'
      });
    })();
  }
});


</script>
